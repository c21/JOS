/* See COPYRIGHT for copyright information. */

#include <inc/mmu.h>
#include <inc/memlayout.h>
#include <inc/trap.h>

#include <kern/picirq.h>


###################################################################
# exceptions/interrupts
###################################################################

/* TRAPHANDLER defines a globally-visible function for handling a trap.
 * It pushes a trap number onto the stack, then jumps to _alltraps.
 * Use TRAPHANDLER for traps where the CPU automatically pushes an error code.
 *
 * You shouldn't call a TRAPHANDLER function from C, but you may
 * need to _declare_ one in C (for instance, to get a function pointer
 * during IDT setup).  You can declare the function with
 *   void NAME();
 * where NAME is the argument passed to TRAPHANDLER.
 */
#define TRAPHANDLER(name, num)            \
  .globl name;    /* define global symbol for 'name' */  \
  .type name, @function;  /* symbol type is function */    \
  .align 2;    /* align function definition */    \
  name:      /* function starts here */    \
  pushl $(num);              \
  jmp _alltraps

/* Use TRAPHANDLER_NOEC for traps where the CPU doesn't push an error code.
 * It pushes a 0 in place of the error code, so the trap frame has the same
 * format in either case.
 */
#define TRAPHANDLER_NOEC(name, num)          \
  .globl name;              \
  .type name, @function;            \
  .align 2;              \
  name:                \
  pushl $0;              \
  pushl $(num);              \
  jmp _alltraps

.text

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */
TRAPHANDLER_NOEC(T_DIVIDE_TRAP, T_DIVIDE)     # 0    // divide error
TRAPHANDLER_NOEC(T_DEBUG_TRAP, T_DEBUG)       # 1    // debug exception
TRAPHANDLER_NOEC(T_NMI_TRAP, T_NMI)           # 2    // non-maskable interrupt
TRAPHANDLER_NOEC(T_BRKPT_TRAP, T_BRKPT)       # 3    // breakpoint
TRAPHANDLER_NOEC(T_OFLOW_TRAP, T_OFLOW)       # 4    // overflow
TRAPHANDLER_NOEC(T_BOUND_TRAP, T_BOUND)       # 5    // bounds check
TRAPHANDLER_NOEC(T_ILLOP_TRAP, T_ILLOP)       # 6    // illegal opcode
TRAPHANDLER_NOEC(T_DEVICE_TRAP, T_DEVICE)     # 7    // device not available
TRAPHANDLER(T_DBLFLT_TRAP, T_DBLFLT)          # 8    // double fault
/* T_COPROC  9 */ # reserved (not generated by recent processors)
TRAPHANDLER(T_TSS_TRAP, T_TSS)                # 10    // invalid task switch segment
TRAPHANDLER(T_SEGNP_TRAP, T_SEGNP)            # 11    // segment not present
TRAPHANDLER(T_STACK_TRAP, T_STACK)            # 12    // stack exception
TRAPHANDLER(T_GPFLT_TRAP, T_GPFLT)            # 13    // general protection fault
TRAPHANDLER(T_PGFLT_TRAP, T_PGFLT)            # 14    // page fault
/* T_RES    15 */ # reserved
TRAPHANDLER_NOEC(T_FPERR_TRAP, T_FPERR)       # 16    // floating point error
TRAPHANDLER_NOEC(T_ALIGN_TRAP, T_ALIGN)       # 17    // aligment check
TRAPHANDLER_NOEC(T_MCHK_TRAP,  T_MCHK)        # 18    // machine check
TRAPHANDLER_NOEC(T_SIMDERR_TRAP, T_SIMDERR)   # 19    // SIMD floating point error
TRAPHANDLER_NOEC(T_SYSCALL_TRAP, T_SYSCALL)   # 48    // system call
# Hardware IRQ numbers.
TRAPHANDLER_NOEC(IRQ_TIMER_TRAP, IRQ_OFFSET + IRQ_TIMER)        # 0 
TRAPHANDLER_NOEC(IRQ_KBD_TRAP, IRQ_OFFSET + IRQ_KBD)            # 1
TRAPHANDLER_NOEC(IRQ_SERIAL_TRAP, IRQ_OFFSET + IRQ_SERIAL)      # 4
TRAPHANDLER_NOEC(IRQ_SPURIOUS_TRAP, IRQ_OFFSET + IRQ_SPURIOUS)  # 7
TRAPHANDLER_NOEC(IRQ_IDE_TRAP, IRQ_OFFSET + IRQ_IDE)            # 14
TRAPHANDLER_NOEC(IRQ_ERROR_TRAP, IRQ_OFFSET + IRQ_ERROR)        # 19

/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:
  pushl %ds
  pushl %es
  # push all general registers (struct PushRegs)
  pushal
  movw $(GD_KD), %ax
  movw %ax, %ds
  movw %ax, %es
  pushl %esp
  call trap
